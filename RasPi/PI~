%  .--.      .-'.      .--.      .--.      .--.      .--.      .`-.      .%
%:::::.\::::::::.\::::::::.\::::::::.\::::::::.\::::::::.\::::::::.\::::::%
%'      `--'      `.-'      `--'      `--'      `--'      `-.'      `--'  %
%                           ____             ____  _ 			  %
%			   / __ \____ ______/ __ \(_)			  %
% 			  / /_/ / __ `/ ___/ /_/ / / 			  %	
%			 / _, _/ /_/ (__  ) ____/ /  			  %
%			/_/ |_|\__,_/____/_/   /_/   			  %
%'      .--.      .'-.      .--.      .--.      .--.      .-'.      .--.  %
%:::::'/::::::::'/::::::::'/::::::::'/::::::::'/::::::::'/::::::::'/::::::%
%  `--'      `-.'      `--'      `--'      `--'      `--'      `.-'      `%

%=========================================================================%
%                             Useful Commands                             %
%=========================================================================% 

This is the general way to ssh into the Pi
>> sudo pi@xxx.xxx.xxx.xxx 

If you wish to change network settings, these are the files
>> sudo nano /etc/network/interfaces
>> sudo nano /etc/wpa_supplicant/wpa_supplicant.conf

Useful to grab network data
>> sudo ifconfig

For a complete update of the Pi
>> sudo apt-get update
>> sudo apt-get upgrade
>> sudo rpi-update

Git Commands
>> git init
>> git config --global user.name "kat284"
>> git config --global user.email scokie@rocketmail.com
>> git clone https://github.com/kat284/nexus_project.git
>> git add 'Filename.txt' or git add *
>> git commit -m 'Text Here'
>> git push
>> git pull

%=========================================================================%
%                         Full Installation Guide                         %
%=========================================================================% 


%-------------------------------------------------------------------------%
%                                 Images!                                 %
%-------------------------------------------------------------------------%

Of course things would be a lot easier if we could skip a few steps right? Well that's what images are for! There are two purposes to use them. One, we skip needing to use GParted and the steps related to it. Two, probably the best, is to completely skip the entire guide and re-image the SD card with a finished image! The issue is to do the latter, we need the finished image and I have been having issues with making one (should be easy but it doesn't seem to work) so for now, we will not do anything with images as the full setup will always work. I will change this in the future if I can get it done successfully.

As a mini-guide/reminder of how this would had work if this did work...
- Get from SD card
>> sudo dd bs=4M f=/dev/mmcblk0 of=~/SDCardBackup.img
- Put onto SD card
>> sudo dd bs=4M if=~/SDCardBackup.img of=/dev/mmcblk0

%-------------------------------------------------------------------------%
%                              SD Card Setup                              %
%-------------------------------------------------------------------------%

First you will need an OS. I suggest Raspbian (wheezy) from NOOBS. You can find it on the computer or online here: 
	https://www.raspberrypi.org/downloads/
- I have had issues with Raspbian on it's own so using NOOBS would be the best idea.

Once downloaded, exact and use "GParted" to remove partitions from the SD card and then create a FAT32 partition that takes up the entire space of the drive. Once everything checks out and you made sure you are not using the actual boot drive, apply the changes.
- You can call the label "RasPi", after the name of the raspberry pi (my name for it).
- For the case when "GParted" is no longer usable, search for an automatic SD card formater or terminal codes (only for advanced users).

Copy the extracted files to the card and it's finished!
- If the zip file extracted into a single file of the same name, copy what's inside that file. You should have multiple files and folders in the root of the SD card when you are finished.

%-------------------------------------------------------------------------%
%                            Turning on the Pi                            %
%-------------------------------------------------------------------------% 

This will require the use of a TV or monitor, keyboard, mouse and HDMI cable but luckily, it's a one time usage. Find everything and hook it up.
- The keyboard and mouse can be replaced with a special wifi-keyboard. This is very useful and can be used for many purposes.

Using NOOBS, you should see settings for which OS to install and things like, data partition and booting. Check Raspbian and data partition and start the installation.
- Data partition is for a sort of backup partition, what ever is placed inside, we can choose not to delete it when setting up the SD card. In that case we don't check data partition if we already are using one!
- This will take some time to install, maybe 10 mins.

Once complete, the pi will reboot into a config screen. From here we can do easy setup on the Pi without having to deal with config files.
- First, change the password of the user to (without quotes) "zaq12wsx"
- Second, enable the camera
- Third is in Advanced Options, enable SSH, Device Tree, SPI, I2C and Serial. If asked to load files on startup (or similar) say "Yes".
- Fourth, in Advanced Options again, change the hostname to "RasPi"

The last two setting are a little less straight forward. Overclocking on the Pi isn't as it seems as the Pi2 (yes that's the full name) is initally at 900MHz ARM speed if you don't change settings... but it's higher than the "None" setting in the presets! Currently, the highest setting is "Pi2" where I have been using it with a great increase in speed. The issue with any setting here is heat, power usage and stability. I will not explain how they increase for each (it's somewhat simple to tell) but I will say that if the Pi crashes or overheats constantly at a setting, change the setting! All of the  preset are made by the makers of the Pi and are suppose to work but of course, every board is different so that leads to the different issues.
- Set overclock preset to "Pi2" for now. Lower if needed.

The last thing to change is the Advance Setting>Memory Split. The Pi2 comes with 1GB RAM..., that's it. There is no special RAM only for GPU or CPU so there is instead a ratio as to what can use what amount of RAM. GPU is more important for stuff like video or games while CPU is just for processing in general. For now, we don't need the GPU's ratio high so setting it to 32 RAM would be fine. In the future, if needed, increasing the RAM may be useful but beware, the Pi will be limited!
- Set Advance Setting>Memory Split to "32". Increase if needed.

Once done, go ahead and select "Finish" and reboot. The Pi is basically usable now but for WiFi, a little more setup is needed. Log in with the new password to get started and then enter the following.
>> sudo nano /etc/wpa_supplicant/wpa_supplicant.conf

The file should open (enter password as needed) and make sure the file has the following:
%\-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=/%
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

# This is for my NOVA home's wifi.
network={
        ssid="Moto-Wifi"
        psk="zaq12wsx!"
        key_mgmt=WPA-PSK
}

# This is for my actual home's wifi.
network={
        ssid="Nexus"
        psk="zaq12wsx!"
}

# For any other "simple" network, use the template. Remove the "#" before lines aswell.
#network={
#        ssid="Network's Name"
#        psk="Network's Password"
#}
%/-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\%
Click Ctrl+X, then y then Enter to save and exit when complete.

Lastly, we need to check that another file is in order, so enter the following:
>>sudo nano /etc/network/interfaces

The file should open and make sure this is what's inside:
%\-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=/%
auto lo
iface lo inet loopback

auto eth0
allow-hotplug eth0
iface eth0 inet manual

auto wlan0
allow-hotplug wlan0
iface wlan0 inet manual
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

auto wlan1
allow-hotplug wlan1
iface wlan1 inet manual
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
%/-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\%
Click Ctrl+X, then y then Enter to save and exit again when done.
- If it jumps back to the normal terminal when you click Ctrl+X, that just means you made no changes.

We are done, the Pi is now completely usable! The only thing missing are all the packages and files...
- Before moving on, reboot the Pi and take note of the ip address for wlan0. You will need this anytime you wish to ssh into the Pi.
>> sudo reboot
sudo ifconfig

%-------------------------------------------------------------------------% 
%                           Packages and Files                            %
%-------------------------------------------------------------------------% 
Now that you can ssh in, go ahead and do so. We will need to install all files and packages from before.
- To ssh from this or another computer, use the following terminal command.
>> sudo pi@xxx.xxx.xxx.xxx # Replace with the IP address found above
- If asked to allow connections with the Pi, say "yes."

Currently this is the list of useful files/packages (* Already installed)
- PiFace*
- PiGame*
- PiCamera*
- OpenCV libraries
- FSWEBCAM library
- Numpy
- Scipy
- Matplotlib
- Fortan libraries
- Github
- Minicom
- GTK development library
- pip
- more Python libraries
- image and video file packages
- cmake

You will have to update the Pi completely before contining so... (This can take a while depending on if this is the first time)
>> sudo apt-get update
sudo apt-get upgrade
sudo rpi-update

This installs all the libraries listed above, this process can take 30 mins (with a slow connection and "Pi2" overclock)
>> sudo apt-get install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev libgtk2.0-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libatlas-base-dev libopencv-dev python2.7-dev git-all fswebcam minicom build-essential cmake pkg-config gfortran python-opencv python-pygame python-pip python-dev python-matplotlib python-numpy python-scipy
sudo pip install --upgrade pip
sudo pip install -U scikit-learn
sudo pip install virtualenv virtualenvwrapper

Well everything is done and now you can do whatever you want with the Pi... of course, if you want to start over that is. To get all the files and libraries for the Pi, you will need to use GitHub to pull the repo online. 

To finish the Git setup on the Pi, enter the following
>> git init
git config --global user.name "kat284"
git config --global user.email scokie@rocketmail.com
git clone https://github.com/kat284/nexus_project.git

This is a reminder of how git works
>> git add 'Filename.txt' or git add *
git commit -m 'Text Here'
git push
- Use the following to just pull from the repo
>> git pull

%=========================================================================%
%                        ROS - The turtle simulator                       %
%=========================================================================% 

There are still a lot of things for me to learn before I can use ROS and Gazebo correctly but I wanted to make a section for this as a reminder. There are two types of ROS related things for me to install. The first is ROS itself which has a pre-made Instructable that seems to be helpful to use:
	http://www.instructables.com/id/Getting-Started-with-ROS-Robotic-Operating-Syste/
- You will be told to install ROS, which is written out below.
- The ROS wiki can help but from experience, it's not too great for beginners. Youtube is wonderful in that case.

>>sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu wheezy main" > /etc/apt/sources.list.d/ros-latest.list'
wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -
sudo apt-get install python-setuptools python-yaml python-argparse python-distribute python-docutils python-dateutil python-six checkinstall
sudo pip install rosdep rosinstall_generator wstool rosinstall
sudo rosdep init
rosdep update
mkdir ~/ros_catkin_ws
cd ~/ros_catkin_ws
rosinstall_generator ros_comm --rosdistro indigo --deps --wet-only --exclude roslisp --tar > indigo-ros_comm-wet.rosinstall
wstool init src indigo-ros_comm-wet.rosinstall
mkdir ~/ros_catkin_ws/external_src
sudo sh -c 'echo "deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi" >> /etc/apt/sources.list'
sudo apt-get update
cd ~/ros_catkin_ws/external_src
sudo apt-get build-dep console-bridge
apt-get source -b console-bridge
sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb
cd ~/ros_catkin_ws/external_src
apt-get source -b lz4
sudo dpkg -i liblz4-*.deb
cd ~/ros_catkin_ws
rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:wheezy
sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/indigo
source /opt/ros/indigo/setup.bash
cd ~/ros_catkin_ws
rosinstall_generator ros_comm ros_control joystick_drivers --rosdistro indigo --deps --wet-only --exclude roslisp --tar > indigo-custom_ros.rosinstall
wstool merge -t src indigo-custom_ros.rosinstall
wstool update -t src
rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:wheezy
sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/indigo


